package gitlet;

import java.nio.file.Paths;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.*;
import java.io.File;
import java.nio.file.Files;
import java.io.IOException;

public class gitlet {

    private StagingArea stagingArea;
    private Commit master;
    private Commit Head;
    private Commit currCommit;

    public gitlet() {
        StagingArea stagingArea = new StagingArea();
        Commit master = new Commit(null, "initial commit");
        Commit Head = master; // default branch
        Commit currCommit = Head;

    }

    public class Commit implements Serializable {
        String parent;
        String message;
        Date commitDate;
        HashMap<String, String> contents;

        public Commit(String parentID, String Message) {
            final String parent = parentID;
            final String message = Message;
            Date commitDate = new Date();
            HashMap<String, String> contents;
        }
        public void copyParentHashMap() {
            Utils.deserialize(currCommit, "Commits");
            currCommit.contents.putAll(contents);
        }

        public void addStagingArea() {
            Utils.deserialize(stagingArea, "StagingAreaFiles" );
            List<String> files = Utils.plainFilenamesIn("StagingAreaFiles");
            for (String fileName : files) {
                if (contents.containsKey(fileName)) {
                    File file = new File("../Blobs");
                    byte[] bytes = new byte[0];
                    try {
                        bytes = Files.readAllBytes(file.toPath());
                    } catch (IOException excp) {

                    }
                    String hash = Utils.sha1(key, bytes);

                }
            }

        }


    }

    public class Blob implements Serializable {
        public Blob(File _file) {
            final File file = _file;
        }
    }

    public class StagingArea implements Serializable {
        private HashMap<String, File> files;

        public StagingArea() {
            HashMap<String, File> files = new HashMap<>();/* should we store the files as an array or a linked list
            if array, would we need to resize it and use ArrayDeque?
            if LL, would it take too long to search for it's contents?
            Hashmap? Hashmap
            */
        }

    }

    //Methods
//    public StagingArea getStagingArea() {
//        return this.stagingArea;
//    }
    public static void copyFile(Filre source, File dest) throws IOException {
        InputStream is = null;
        OutputStream os = null;
        try {
            is = new FileInputStream(source);
            os = new FileOutputStream(dest);
            byte[] buffer = new byte[1024];
            int length;
            while ((length = is.read(buffer)) > 0) {
                os.write(buffer, 0, length);
            }
        } finally {
            is.close();
            os.close();
        }
    }

    public void add(String file) {
        if (file.exists()) {
            Utils.deserialize(stagingArea, "StagingAreaFiles");

            //if file already in staging area
            boolean check = new File("../StagingAreaFiles").exists();
            if (check) {
                File oldFile = new File("../StagingAreaFiles");
                byte[] bytes = new byte[0];
                try {
                    bytes = Files.readAllBytes(file.toPath());
                    Utils.writeContents(oldFile ,bytes);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            //if file not in staging area but this is the initial commit
            Utils.deserialize(currCommit, "Commits");
            if (currCommit.message == "initial commit") {
                File newFile = new File("../StagingAreaFiles", file.getName());
                try {
                    copyFile(file, newFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            //if file not in staging area, not in commit but is in currCommit
            byte[] bytes = new byte[0];
            try {
                bytes = Files.readAllBytes(file.toPath());
            } catch (IOException excp) {
            }
            if (currCommit.contents.get(file.toString()) != Utils.sha1(file.getName(), bytes)) {
                File newFile = new File("../StagingAreaFiles", file.getName());
                try {
                    copyFile(file, newFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            Utils.serialize(stagingArea, "StagingAreaFiles");
        }
        //if file doesn't exist
        else {
            System.out.println("File does not exist.");
        }
    }



}
